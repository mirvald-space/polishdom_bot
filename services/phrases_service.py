import json
import random
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from assistant_api import AssistantsAPI
import config

# Load the assistant configuration
with open("assistant_config.json") as file:
    assistant_config = json.load(file)

assistant_id = assistant_config["id"]

# Initialize the AssistantsAPI client
assistants_api = AssistantsAPI(api_key=config.ASSISTANTS_API_KEY)

async def fetch_content(prompt):
    instructions = "You are an expert in the Polish language. Generate 10 brief conversational phrases in Polish."
    messages = [
        {"role": "system", "content": instructions},
        {"role": "user", "content": prompt}
    ]
    response = await assistants_api.call_assistant(
        model=config.GPT_MODEL,
        messages=messages,
        max_tokens=config.MAX_TOKENS,
        temperature=config.TEMPERATURE,
    )
    return response["choices"][0]["message"]["content"].strip()

async def send_phrases(bot: Bot):
    attempts = 0
    prompt = config.PROMPT_TEMPLATE_PHARASES + "\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ 10 –∫—Ä–∞—Ç–∫–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑."
    
    while attempts < config.MAX_ATTEMPTS:
        attempts += 1
        content = await fetch_content(prompt)
        phrases = content.split('\n')
        phrases = [line.strip() for line in phrases if line.strip()]
        print(f"Attempt {attempts}: {len(phrases)} phrases found")

        if len(phrases) >= 10:
            limited_phrases = '\n\n'.join(phrases[:10])
            header = "<b>üó£ –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–∞ –ø–æ–ª—å—Å–∫–æ–º —è–∑—ã–∫–µ</b>\n\n"
            footer = "\n\n–ó–Ω–∞–ª–∏ –ª–∏ –≤—ã —ç—Ç–∏ —Ñ—Ä–∞–∑—ã? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Öüëá\n\n@polishdom"
            message = header + limited_phrases + footer
            await bot.send_message(chat_id=config.CHANNEL_ID, text=message, parse_mode='HTML')
            return
        else:
            print(f"–û—à–∏–±–∫–∞: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–µ–Ω—å—à–µ 10 —Ñ—Ä–∞–∑ –∏–ª–∏ –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempts})")

    print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ {config.MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")

phrases_scheduler = AsyncIOScheduler()
