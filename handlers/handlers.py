import logging
import os

from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from dotenv import load_dotenv

from services.user_service import add_new_user, is_new_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
ALLOWED_CHAT_ID = os.getenv('ALLOWED_CHAT_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∞
if ALLOWED_CHAT_ID is not None:
    try:
        ALLOWED_CHAT_ID = int(ALLOWED_CHAT_ID)
    except ValueError:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ALLOWED_CHAT_ID –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
else:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ALLOWED_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–∞")

async def delete_invite_message(message: types.Message):
    logging.info("Called delete_invite_message")
    if message.chat.id == ALLOWED_CHAT_ID:
        if message.new_chat_members or message.left_chat_member:
            await message.delete()

async def start_command(message: Message):
    logging.info("Called start_command")
    user_id = message.from_user.id
    username = message.from_user.username
    if await is_new_user(user_id):
        logging.info(f"New user detected: {username} (ID: {user_id})")
        await add_new_user(user_id, username)
        await message.answer(
            "üéâ<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ö–∞—Ä—Ç–µ –ü–æ–ª—è–∫–∞.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ <b>@polishdom</b>", 
            parse_mode='HTML'
        )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞", callback_data="test")],
        [InlineKeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é", callback_data="interview")]
    ])
    await message.answer("<b>–ü—Ä–∏–≤–µ—Ç!üëã</b> \n –Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ö–∞—Ä—Ç–µ –ü–æ–ª—è–∫–∞.\n\n –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:üëá", reply_markup=keyboard, parse_mode='HTML')

async def status_command(message: types.Message):
    logging.info("Called status_command")
    await message.answer("<b>–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!</b>", parse_mode='HTML')

async def unknown_command(message: types.Message):
    logging.info("Called unknown_command")
    if message.text and message.text.startswith('/'):
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /status.")

async def register_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(start_command, Command(commands=["start"]))
    dp.message.register(status_command, Command(commands=["status"]))
    dp.message.register(unknown_command, lambda message: message.text and message.text.startswith('/'))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–Ω–∏–º
    dp.message.register(delete_invite_message)
