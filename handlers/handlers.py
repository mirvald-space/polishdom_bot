from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from services.user_service import is_new_user, add_new_user

async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    if await is_new_user(user_id):
        await add_new_user(user_id, username)
        await message.answer(
            "üéâ<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!<b>\n–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –ö–∞—Ä—Ç–µ –ü–æ–ª—è–∫–∞.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ <b>@polishdom<b>", parse_mode='HTML'
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞", callback_data="test")],
        [InlineKeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é", callback_data="interview")]
    ])
    await message.answer("<b>–ü—Ä–∏–≤–µ—Ç!üëã</b> \n –Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –ö–∞—Ä—Ç–µ –ü–æ–ª—è–∫–∞.\n\n –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:üëá", reply_markup=keyboard, parse_mode='HTML')

async def status_command(message: types.Message):
    await message.answer("<b>–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!</b>", parse_mode='HTML')

async def unknown_command(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /status.")

async def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command(commands=["start"]))
    dp.message.register(status_command, Command(commands=["status"]))
    dp.message.register(unknown_command)
