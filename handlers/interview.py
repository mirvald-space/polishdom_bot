import os
import random

from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from services.db import mongo  # Import the mongo instance
from services.interview_service import evaluate_answers, questions


class InterviewStates(StatesGroup):
    WELCOME = State()
    ASK_QUESTION = State()
    WAIT_ANSWER = State()
    SHOW_REPORT = State()
    ASK_FEEDBACK = State()

async def interview_welcome(callback: CallbackQuery, state: FSMContext):
    random.shuffle(questions)
    selected_questions = questions[:10]  # Select up to 10 questions randomly
    await state.update_data(current_question=0, questions_and_answers=[], selected_questions=selected_questions)
    welcome_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–ö–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "–í–∞–∂–Ω–æ: –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π —è–∑—ã–∫, –Ω–æ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ª—å—Å–∫–∏–π. üáµüá±"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÅ –ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="start_interview")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_interview")]
    ])
    await callback.message.answer(welcome_message, reply_markup=keyboard)
    await state.set_state(InterviewStates.WELCOME)

async def start_interview(callback: CallbackQuery, state: FSMContext):
    await ask_next_question(callback.message, state)

async def ask_next_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_question = data.get('current_question', 0)
    selected_questions = data.get('selected_questions', [])

    if current_question < len(selected_questions):
        question = selected_questions[current_question]
        await state.set_state(InterviewStates.WAIT_ANSWER)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_interview")]
        ])
        await message.answer(question, reply_markup=keyboard)
    else:
        await message.answer("–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. ‚è≥")
        await show_report(message, state)

async def handle_user_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_question = data.get('current_question')
    questions_and_answers = data.get('questions_and_answers', [])
    selected_questions = data.get('selected_questions', [])

    if not selected_questions or current_question >= len(selected_questions):
        await message.answer("–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    question = selected_questions[current_question]
    user_answer = message.text

    # Update state
    questions_and_answers.append({"question": question, "answer": user_answer})
    await state.update_data(
        current_question=current_question + 1,
        questions_and_answers=questions_and_answers
    )

    await ask_next_question(message, state)

async def show_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions_and_answers = data.get('questions_and_answers', [])

    # Evaluate all answers
    evaluation = await evaluate_answers(questions_and_answers)
    
    # Extract scores and calculate average score
    scores = [int(line.split("–ë–∞–ª–ª—ã: ")[1].split("/")[0]) for line in evaluation.split("\n\n") if "–ë–∞–ª–ª—ã: " in line]
    total_score = sum(scores)
    average_score = total_score / len(scores) if scores else 0

    # Form full report
    report = f"""
<b>üìÑ –í–∞—à –æ—Ç—á–µ—Ç –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏:</b>
<b>üèÖ –û–±—â–∏–π –±–∞–ª–ª:</b> {total_score} –∏–∑ {len(scores) * 10}
<b>üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {average_score:.2f}

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {'–í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é.' if average_score >= 7 else '–í–∞–º —Å—Ç–æ–∏—Ç –ª—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é.'}

<b>üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b>
{evaluation}
    """

    # Split report into multiple messages if it exceeds Telegram's message length limit
    MAX_MESSAGE_LENGTH = 4096
    messages = [report[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(report), MAX_MESSAGE_LENGTH)]

    # Send each part of the report as a separate message
    for part in messages:
        await message.answer(part, parse_mode="HTML")

    await ask_feedback(message, state)

async def ask_feedback(message: types.Message, state: FSMContext):
    feedback_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç 1 –¥–æ 5:"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=f"feedback_{i}") for i in range(1, 6)]
    ])
    await message.answer(feedback_message, reply_markup=keyboard)
    await state.set_state(InterviewStates.ASK_FEEDBACK)

async def handle_feedback(callback: CallbackQuery, state: FSMContext):
    feedback_rating = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    username = callback.from_user.username

    # Save feedback to database using the mongo instance
    await mongo.save_interview_evaluation(user_id, username, feedback_rating)

    await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {feedback_rating}!")
    await return_to_main_menu(callback, state)

async def cancel_interview(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await return_to_main_menu(callback, state)

async def return_to_main_menu(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞", callback_data="test")],
        [InlineKeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é", callback_data="interview")]
    ])
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    await callback.answer()
    await state.clear()

async def register_interview_handlers(dp: Dispatcher):
    dp.callback_query.register(interview_welcome, lambda c: c.data == "interview")
    dp.callback_query.register(start_interview, lambda c: c.data == "start_interview")
    dp.message.register(handle_user_answer, InterviewStates.WAIT_ANSWER)
    dp.callback_query.register(cancel_interview, lambda c: c.data == "cancel_interview")
    dp.callback_query.register(return_to_main_menu, lambda c: c.data == "main_menu")
    dp.callback_query.register(handle_feedback, lambda c: c.data.startswith("feedback_"))
